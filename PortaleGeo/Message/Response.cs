using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;


namespace PortaleGeoWeb.message
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;


    // <auto-generated />
    //
    //
    //  https://app.quicktype.io/#l=cs&r=json2csharp 
    //
    // To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
    //
    //    using QuickType;
    //
    //    var welcome = HereGeocodeResponse.FromJson(jsonString);



    public partial class HereGeocodeResponse
    {
        [JsonProperty("Response")] public Response Response { get; set; }
    }

    public partial class Response
    {
        [JsonProperty("MetaInfo")] public MetaInfo MetaInfo { get; set; }

        [JsonProperty("View")] public View[] View { get; set; }
    }

    public partial class MetaInfo
    {
        [JsonProperty("Timestamp")] public string Timestamp { get; set; }
    }

    public partial class View
    {
        [JsonProperty("_type")] public string Type { get; set; }

        [JsonProperty("ViewId")] public long ViewId { get; set; }

        [JsonProperty("Result")] public Result[] Result { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("Relevance")] public double Relevance { get; set; }

        [JsonProperty("MatchLevel")] public string MatchLevel { get; set; }

        [JsonProperty("MatchQuality")] public MatchQuality MatchQuality { get; set; }

        [JsonProperty("MatchType")] public string MatchType { get; set; }

        [JsonProperty("Location")] public Location Location { get; set; }
    }

    public partial class Location
    {
        [JsonProperty("LocationId")] public string LocationId { get; set; }

        [JsonProperty("LocationType")] public string LocationType { get; set; }

        [JsonProperty("DisplayPosition")] public DisplayPosition DisplayPosition { get; set; }

        [JsonProperty("NavigationPosition")] public DisplayPosition[] NavigationPosition { get; set; }

        [JsonProperty("MapView")] public MapView MapView { get; set; }

        [JsonProperty("Address")] public Address Address { get; set; }
    }

    public partial class Address
    {
        [JsonProperty("Label")] public string Label { get; set; }

        [JsonProperty("Country")] public string Country { get; set; }

        [JsonProperty("State")] public string State { get; set; }

        [JsonProperty("County")] public string County { get; set; }

        [JsonProperty("City")] public string City { get; set; }

        [JsonProperty("Street")] public string Street { get; set; }

        /*GF tolto perchè a volte non è serializzato come long */
        //[JsonProperty("HouseNumber")]
        //[JsonConverter(typeof(ParseStringConverter))]
        //public long HouseNumber { get; set; }

        [JsonProperty("PostalCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCode { get; set; }

        [JsonProperty("AdditionalData")] public AdditionalDatum[] AdditionalData { get; set; }
    }

    public partial class AdditionalDatum
    {
        [JsonProperty("value")] public string Value { get; set; }

        [JsonProperty("key")] public string Key { get; set; }
    }

    public partial class DisplayPosition
    {
        [JsonProperty("Latitude")] public double Latitude { get; set; }

        [JsonProperty("Longitude")] public double Longitude { get; set; }
    }

    public partial class MapView
    {
        [JsonProperty("TopLeft")] public DisplayPosition TopLeft { get; set; }

        [JsonProperty("BottomRight")] public DisplayPosition BottomRight { get; set; }
    }

    public partial class MatchQuality
    {
        [JsonProperty("Country")] public long Country { get; set; }

        [JsonProperty("State")] public long State { get; set; }

        [JsonProperty("City")] public long City { get; set; }

        [JsonProperty("Street")] public long[] Street { get; set; }

        [JsonProperty("HouseNumber")] public long HouseNumber { get; set; }
    }

    public partial class HereGeocodeResponse
    {
        public static HereGeocodeResponse FromJson(string json) =>
            JsonConvert.DeserializeObject<HereGeocodeResponse>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this HereGeocodeResponse self) =>
            JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter {DateTimeStyles = DateTimeStyles.AssumeUniversal}
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }

            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }

            var value = (long) untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }


}


